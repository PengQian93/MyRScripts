#ifndef  _LLF_PUBLIC_H_
#define  _LLF_PUBLIC_H_


#define SIGNATURE_END   0x42656566          // Beef

#define ENABLE                  1
#define DISABLE                 0
#define ALWAYS                  1
#define NEED_CARE               2


#if defined(RL6577_FPGA) || defined(RL6577_VA)

/**************************************
** 	 LLF non-DRAM layout mapping **
**************************************/
#define LLF_RAM_GLOBAL_ADDR         0x80204000
#define LLF_RAM_GLOBAL_SIZE         0x4000

//for FW image
#define FW_CODE_PHY_ADDR            0x0CFD4000//0x0cfd4000
#define FW_CODE_ADDR                (FW_CODE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xacfd4000
#ifdef IS_NEXTGEN
#define FW_CODE_SIZE                0xCC000 //816K
#else
#define FW_CODE_SIZE                0xbC000 //752K origin: 0xa0000//640k  reserve 1M for FW IMAGE
#endif
#ifdef OPAL_EN
#define TCG_SPECIAL_SIZE_IN_LBN     35333   // (MBR+DATASTORE) * 2 + OBJECT TABLE = (128MB + 10MB) * 2 + 20KB
#endif

#if defined(RL6577_VA)
#define SPECIAL_DEFAULT_ROOM_LBA_SIZE       0x5000//LBA 10M room
#endif

//SRAM
#define LDPC_G_MATRIX_SIZE          (0x4080)
#define LDPC_ET_MATRIX_SIZE         (0x400)
#define LDPC_LLR_MATRIX_SIZE        (0x500)
#define LDPC_MATRIX_SIZE            (LDPC_G_MATRIX_SIZE + LDPC_ET_MATRIX_SIZE + LDPC_LLR_MATRIX_SIZE)

#define TABLE_ADDR                  SRAM5_START//0xac000000
#define TABLE_PHY_ADDR				(TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x0c000000
#define PARSER_TABLE_VA_ADDR		TABLE_ADDR//0xac000000
#define PARSER_TABLE_SIZE			(1024*4)
#define SEQUENCER_TABLE_VA_ADDR		(PARSER_TABLE_VA_ADDR + PARSER_TABLE_SIZE)//0xac001000
#define SEQUENCER_TABLE_SIZE		(256*4)
#define PARSER_INDEX_ADDR			(SEQUENCER_TABLE_VA_ADDR + SEQUENCER_TABLE_SIZE)//0xac001400
#define PARSER_INDEX_SIZE			0x80
#define SEQUENCER_INDEX_ADDR		(PARSER_INDEX_ADDR + PARSER_INDEX_SIZE)//0xac001480
#define SEQUENCER_INDEX_SIZE		0x30
#define AUTO_INSERT_INDEX_ADDR		(SEQUENCER_INDEX_ADDR + SEQUENCER_INDEX_SIZE)//0xac0014b0
#define AUTO_INSERT_INDEX_SIZE		0x20
#define FC_TABLE_INFO_ADDR          (AUTO_INSERT_INDEX_ADDR + AUTO_INSERT_INDEX_SIZE)//0xac0014d0
#define FC_TABLE_INFO_SIZE          0x80
#define SEED_TABLE_VA_ADDR			((FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE + 0x200) & (~0x1ff))
#define SEED_TABLE_ACTUAL_USE_SIZE	(0x400)

#define GET_FEATURE_VA_ADDR        (FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE)//0xac001550
#define GET_FEATURE_PHY_ADDR 	   (GET_FEATURE_VA_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x0c001550
#define GET_FEATURE_SIZE           (0x10)

#define BANK_IMAPPING_TABLE_ADDR    	(GET_FEATURE_VA_ADDR + GET_FEATURE_SIZE) //0xac001560
#define BANK_IMAPPING_TABLE_PHY_ADDR    (BANK_IMAPPING_TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET) //0x0c001560
#define BANK_IMAPPING_TABLE_SIZE        64

#define SBLK_PHY_ADDR			    (BANK_IMAPPING_TABLE_PHY_ADDR + BANK_IMAPPING_TABLE_SIZE)	//0x0c0015a0
#define SBLK_ADDR                   (SBLK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET ) // save S Block here 0xac0015a0
#define SBLK_SIZE                    0x2000 // max 1 page size

#define CONFIG_BASE_VA_ADDR		    ALIGN_32(SBLK_ADDR + SBLK_SIZE)//0xac0035a0 total 6.25K need 32byte align
#define CONFIG_SIZE				    (0x1900)//6.25KB: 4KB + 1KB for config and 1KB + 0.25KB for seed table
#define CONFIG_ACTUAL_USE_SIZE		(0x1400)
#define CONFIG_SEED_TABLE_SIZE		(0x500)
#define CONFIG_SEED_TABLE_VA_ADDR	ALIGN_32(CONFIG_BASE_VA_ADDR + CONFIG_ACTUAL_USE_SIZE)

#define DBT_ADDR                    (CONFIG_BASE_VA_ADDR + CONFIG_SIZE)// save DBT here 0xac004ea0
#define DBT_PHY_ADDR				(DBT_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x0c004ea0

#define LLF_UNI_INFO_ADDR           (DBT_ADDR + DBT_SIZE)//0xac00cea0
#define MAX_LLF_UNI_INFO_SIZE       (256)

#define TSB_RETRY_SETTING_ADDR      (LLF_UNI_INFO_ADDR + MAX_LLF_UNI_INFO_SIZE)//0xac00cfa0
#define MAX_TSB_RETRY_SETTING_SIZE  (256)

#define SYS_BLK_DBT_ADDR            (TSB_RETRY_SETTING_ADDR + MAX_TSB_RETRY_SETTING_SIZE)//0xac00d0a0
#define SYS_BLK_DBT_SIZE            (SYS_BLK_DBT_SIZE_PER_BANK * BANK_NUM_MAX)//256byte

#define GETFEATURE_BY_BANK_PHY 	  ALIGN_32((SYS_BLK_DBT_ADDR + SYS_BLK_DBT_SIZE - UNCACHED_PHY_TO_VA_OFFSET))//0x0c00d1a0
#define GETFEATURE_BY_BANK_CA	  (GETFEATURE_BY_BANK_PHY + CACHED_PHY_TO_VA_OFFSET)//0x8c00d1a0
#define GETFEATURE_BY_BANK_UC	  (GETFEATURE_BY_BANK_PHY + UNCACHED_PHY_TO_VA_OFFSET)//0xac00d1a0
#define GETFEATURE_BY_BANK_SIZE   (1024)

//0xac00d540 ~0xac018960 is reserved for FE
//0xac018960~0xac019960 is reserved for UART

#define BLK_REMAP_TABLE_PHY_ADDR (0x0c020000)
#define BLK_REMAP_TABLE_ADDR     (BLK_REMAP_TABLE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac030000
#define BLK_REMAP_TABLE_SIZE     (0x800 * 32)//64K
#define BLK_REMAP_BITMAP_TABLE_ADDR     	ALIGN_32(BLK_REMAP_TABLE_ADDR + guwReMapTableSizePerBank * NandPara.ubBankNum) //0xc0030200
#define BLK_REMAP_BS_INDEX_TABLE_ADDR     	ALIGN_32(BLK_REMAP_BITMAP_TABLE_ADDR + NandPara.uwMpBlockNumPerLun * 2)//0xc0030200
#define BLK_REMAP_TEMP_ADDR					ALIGN_32(BLK_REMAP_BS_INDEX_TABLE_ADDR + NandPara.uwMpBlockNumPerLun)

/*Below reused to AutoRMA Memory*/
#define TEMP_BUF_PHY_ADDR       (0x0c030000)
#define TEMP_BUF_ADDR           (TEMP_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac030000
#define TEMP_BUF_SIZE           0x10000 //32K->64K for more MPBlocks, i.e. H3DTV6

#define TEMP_HBUF_PHY_ADDR      (TEMP_BUF_PHY_ADDR + TEMP_BUF_SIZE)//0x0c040000
#define TEMP_HBUF_ADDR          (TEMP_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac040000
#define TEMP_HBUF_SIZE          (0x100 * 2) //512B

#define DCC_TRAINING_PHY_ADDR    (TEMP_HBUF_PHY_ADDR + TEMP_HBUF_SIZE)//0x0c040200
#define DCC_TRAINING_ADDR        (DCC_TRAINING_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac040200
#define DCC_TRAINING_SIZE        (20 * 1024)//20K

#define DUMMY_DATA_BUF_PHY_ADDR  (DCC_TRAINING_PHY_ADDR + DCC_TRAINING_SIZE)//0x0c045200
#define DUMMY_DATA_BUF_ADDR      (DUMMY_DATA_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac045200
#define DUMMY_DATA_BUF_SIZE      0x8000//32K

#ifdef KEEP_ORIG_DBT
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0x0c04d200
#define ORIG_DBT_ADDR           (ORIG_DBT_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac04d200
#define ORIG_DBT_SIZE           DBT_SIZE // 32K  (0x8000)
#endif

//#define ECT_PHY_ADDR			(TEMP_BUF_PHY_ADDR + TEMP_HBUF_SIZE) //0x0c078200
//#define ECT_VA_ADDR			(ECT_VA_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xac078200
//#define ECT_SIZE              0x4000 //16KB

#define MUL_HBUF_PHY_ADDR      0x0c07f400
#define MUL_HBUF_ADDR          0xac07f400
#define MUL_HBUF_SIZE          (3 * 1024)

#define MUL_BUF_PHY_ADDR      XOR_SRAM_BASE_PHY//0x0d000000
#define MUL_BUF_ADDR          XOR_SRAM_BASE_UCVA//0xad000000
#define MUL_BUF_SIZE          XOR_SRAM_SIZE//640K

#ifdef LLF_AUTO_RMA
//DATABUF 0x0C030000 - 0x0C070000 for ping pong tx mem.
#define TX_PART1_PHY_ADDR           (TEMP_BUF_PHY_ADDR) //0x0C030000
#define TX_PART1_ADDR               (TX_PART1_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC030000
#define TX_PART1_SIZE               (0x20000) //128K

#define TX_PART2_PHY_ADDR           (TX_PART1_PHY_ADDR + TX_PART1_SIZE) //0x0C050000
#define TX_PART2_ADDR               (TX_PART2_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC050000
#define TX_PART2_SIZE               (TX_PART1_SIZE) //128K
//DATABUF 0x0C070000 - 0x0C07F800 for BLOCK data/UR mem.
#define TX_BLOCK_PHY_ADDR           (TX_PART2_PHY_ADDR + TX_PART2_SIZE) //0x0C070000
#define TX_BLOCK_ADDR               (TX_BLOCK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC070000
#define TX_BLOCK_SIZE               (0x8000) //32K
#define TX_UR_PHY_ADDR              (TX_BLOCK_PHY_ADDR + TX_BLOCK_SIZE) //0x0C078000
#define TX_UR_ADDR                  (TX_UR_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC078000
#define TX_UR_SIZE                  (0x7800) //30K
//DATABUF 0x0C07F800 - 0x0C07F808 for tx used reg.
#define TX_PART1_DONE_PHY_ADDR      (TX_UR_PHY_ADDR + TX_UR_SIZE) //0x0C07F800
#define TX_PART1_DONE_ADDR          (TX_PART1_DONE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC07F800
#define TX_PART2_DONE_PHY_ADDR      (TX_PART1_DONE_PHY_ADDR + 4) //0x0C07F804
#define TX_PART2_DONE_ADDR          (TX_PART2_DONE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAC07F804

//XOR_MEM 0x0D000000 - 0x0D080000 for read data
#define READ_DATA_PHY_ADDR          (XOR_SRAM_BASE_PHY) //XOR_SRAM_BASE_PHY//0x0D000000
#define READ_DATA_ADDR              (READ_DATA_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAD000000
#define READ_DATA_SIZE              (0x80000) //512K
#define READ_DATA_PHY_ADDR_X(BANK)  (READ_DATA_PHY_ADDR + DRAM_DATA_SIZE * BANK)
#define READ_DATA_ADDR_X(BANK)      (READ_DATA_ADDR + DRAM_DATA_SIZE * BANK)
//XOR_MEM 0x0D080000 - 0x0D080800 for read header
#define READ_HEAD_PHY_ADDR          (READ_DATA_PHY_ADDR + READ_DATA_SIZE) //0x0D080000
#define READ_HEAD_ADDR              (READ_HEAD_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAD080000
#define READ_HEAD_SIZE              (DRAM_HEAD_SIZE * 32)//0x800 2K (MPP:512B*4Plane)
#define READ_HEAD_PHY_ADDR_X(BANK)  (READ_HEAD_PHY_ADDR + DRAM_HEAD_SIZE * BANK)
#define READ_HEAD_ADDR_X(BANK)      (READ_HEAD_ADDR + DRAM_HEAD_SIZE * BANK)
//XOR_MEM 0x0D080800 - 0x0D0A0000 for PAGE0 data mem.
#define TX_PAGE0_PHY_ADDR           (READ_HEAD_PHY_ADDR + READ_HEAD_SIZE) //0x0D080800
#define TX_PAGE0_ADDR               (TX_PAGE0_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xAD080800
#define TX_PAGE0_SIZE               (0x1F800) //126K
#endif

/**************************************
**      For Read Nand Function       **
**************************************/
#define LLF_READ_NAND_CHCE                       (LLF_RES_ERRMSG_START_VA_ADDR)       //b7-4:CH, b3-0:CE
#define LLF_READ_NAND_BLK_PAGE                   (LLF_READ_NAND_CHCE + WORD_BYTE_SIZE)  //H16:block, L16:page  

//for Dump LLF Log
#define LLFMEMMSGBUF_BASE_ADDR	     FW_CODE_ADDR
#define LLFMEMMSGBUF_TOTALSIZE       FW_CODE_SIZE


/**************************************
**      For MTL                      **
**************************************/
#ifdef MULTI_LUN
#if defined(FTL_YG2T) || defined(FTL_YX2T) || defined(FTL_YX3T) || defined(FTL_YX3T_WDS)\
    defined(FTL_SANDISK_BICS3) || defined(FTL_SANDISK_BICS4) || defined(FTL_SANDISK_BICS5) || \
    defined(FTL_TSB_BICS3) || defined(FTL_TSB_BICS4) || defined(FTL_TSB_BICS5) || \
    defined(FTL_SSV4) || defined(FTL_SSV5) || \
    defined(FTL_B17A) || defined(FTL_B47R)
#define MTL_SUPPORT_NAND
#endif
#endif

#elif defined(RL6643_FPGA) || defined(RL6643_VA)

/**************************************
** 	 LLF non-DRAM layout mapping **
**************************************/
#define DATA_BUFFER_PHY_START			(0xC0000000)
#define DATA_BUFFER_VA_UNCACHE_START	(0xC0000000)	//uncacheable address
#define DATA_BUF_SIZE					(0x80000)		//512KB SRAM data buffer
#define DATA_BUFFER_UNCACHE_TO_PHY		(DATA_BUFFER_VA_UNCACHE_START-DATA_BUFFER_PHY_START)
#define DATA_BUFFER_CACHE_VA_TO_PHY     (0xCFFFFFFF)


#define LLF_RAM_GLOBAL_ADDR         0x8021c000
#define LLF_RAM_GLOBAL_SIZE         0x4000

//for FW image
#define FW_CODE_PHY_ADDR            0xcfff0000
#define FW_CODE_ADDR                0xcfff0000
#define FW_CODE_SIZE                0xb0000 //704K origin: 0xa0000//640k  reserve 1M for FW IMAGE

//SRAM
#define LDPC_G_MATRIX_SIZE          (0x4080)
#define LDPC_ET_MATRIX_SIZE         (0x400)
#define LDPC_LLR_MATRIX_SIZE        (0x500)
#define LDPC_MATRIX_SIZE            (LDPC_G_MATRIX_SIZE + LDPC_ET_MATRIX_SIZE + LDPC_LLR_MATRIX_SIZE)

#define TABLE_ADDR                  (DATA_BUFFER_VA_UNCACHE_START + 0xC800)//0xc000c800 the first 50k has been used
#define	TABLE_PHY_ADDR				(DATA_BUFFER_PHY_START + 0xC800)//0xc000c800
#define PARSER_TABLE_VA_ADDR		TABLE_ADDR//0xc000c800
#define PARSER_TABLE_SIZE			(1024*4)
#define SEQUENCER_TABLE_VA_ADDR		(PARSER_TABLE_VA_ADDR + PARSER_TABLE_SIZE)//0xc000d800
#define SEQUENCER_TABLE_SIZE		(256*4)
#define PARSER_INDEX_ADDR			(SEQUENCER_TABLE_VA_ADDR + SEQUENCER_TABLE_SIZE)//0xc000dc00
#define PARSER_INDEX_SIZE			0x80
#define SEQUENCER_INDEX_ADDR		(PARSER_INDEX_ADDR + PARSER_INDEX_SIZE)//0xc000dc80
#define SEQUENCER_INDEX_SIZE		0x30
#define AUTO_INSERT_INDEX_ADDR		(SEQUENCER_INDEX_ADDR + SEQUENCER_INDEX_SIZE)//0xc000dcb0
#define AUTO_INSERT_INDEX_SIZE		0x20
#define FC_TABLE_INFO_ADDR          (AUTO_INSERT_INDEX_ADDR + AUTO_INSERT_INDEX_SIZE)//0xc000dcd0
#define FC_TABLE_INFO_SIZE          0x80
#define SEED_TABLE_VA_ADDR			((FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE + 0x200) & (~0x1ff))
#define SEED_TABLE_ACTUAL_USE_SIZE	(0x400)


#define GET_FEATURE_VA_ADDR        (FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE)//0xc000dd50
#define GET_FEATURE_PHY_ADDR 	   (GET_FEATURE_VA_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xc000dd50
#define GET_FEATURE_SIZE           (0x10)

#define BANK_IMAPPING_TABLE_ADDR    	(GET_FEATURE_VA_ADDR + GET_FEATURE_SIZE) //0xc000ddd60
#define BANK_IMAPPING_TABLE_PHY_ADDR    (BANK_IMAPPING_TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET) //0xc000dd60
#define BANK_IMAPPING_TABLE_SIZE        64

#define SBLK_PHY_ADDR			    (BANK_IMAPPING_TABLE_PHY_ADDR + BANK_IMAPPING_TABLE_SIZE)	//0xc000dda0
#define SBLK_ADDR                   (SBLK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET ) // 0xc000dda0
#define SBLK_SIZE                    0x2000 //8K max 1 page size

#define CONFIG_BASE_VA_ADDR		    ALIGN_32(SBLK_ADDR + SBLK_SIZE)//0xc000fda0 total 6.25K need 32byte align
#define CONFIG_SIZE				    (0x1900)//6.25KB: 4KB + 1KB for config and 1KB + 0.25KB for seed table
#define CONFIG_ACTUAL_USE_SIZE		(0x1400)
#define CONFIG_SEED_TABLE_SIZE		(0x500)
#define CONFIG_SEED_TABLE_VA_ADDR	ALIGN_32(CONFIG_BASE_VA_ADDR + CONFIG_ACTUAL_USE_SIZE)


#define DBT_ADDR                    (CONFIG_BASE_VA_ADDR + CONFIG_SIZE)// save DBT here 0xc00116a0
#define DBT_PHY_ADDR				(DBT_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xc00116a0

#define LLF_UNI_INFO_ADDR           (DBT_ADDR + DBT_SIZE)//0xc00196a0
#define MAX_LLF_UNI_INFO_SIZE       (256)

#define TSB_RETRY_SETTING_ADDR      (LLF_UNI_INFO_ADDR + MAX_LLF_UNI_INFO_SIZE)//0xc00197a0
#define MAX_TSB_RETRY_SETTING_SIZE  (256)

#define SYS_BLK_DBT_ADDR            (TSB_RETRY_SETTING_ADDR + MAX_TSB_RETRY_SETTING_SIZE)//0xc00198a0
#define SYS_BLK_DBT_SIZE            (SYSTEM_BLOCK_MAX_NUM * SYS_BLK_DBT_BYTE_SIZE_PER_BLOCK)

#define GETFEATURE_BY_BANK_PHY 	  ALIGN_32((SYS_BLK_DBT_ADDR + SYS_BLK_DBT_SIZE - UNCACHED_PHY_TO_VA_OFFSET))//0xc0019920
#define GETFEATURE_BY_BANK_CA	  (GETFEATURE_BY_BANK_PHY + CACHED_PHY_TO_VA_OFFSET)//0xe0019920
#define GETFEATURE_BY_BANK_UC	  (GETFEATURE_BY_BANK_PHY + UNCACHED_PHY_TO_VA_OFFSET)//0xc0019920
#define GETFEATURE_BY_BANK_SIZE   (1024)

#define TEMP_BUF_PHY_ADDR       (0xc0020000)
#define TEMP_BUF_ADDR           (TEMP_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0020000
#define TEMP_BUF_SIZE           0x10000 //32K->64K for more MPBlocks, i.e. H3DTV6

#define TEMP_HBUF_PHY_ADDR      (TEMP_BUF_PHY_ADDR + TEMP_BUF_SIZE)//0xc0028000
#define TEMP_HBUF_ADDR          (TEMP_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0028000
#define TEMP_HBUF_SIZE          (0x100 * 2)

#define BLK_REMAP_TABLE_PHY_ADDR (TEMP_HBUF_PHY_ADDR + TEMP_HBUF_SIZE)//0xc0028200
#define BLK_REMAP_TABLE_ADDR     (BLK_REMAP_TABLE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0028200
#define BLK_REMAP_BITMAP_TABLE_ADDR     	ALIGN_32(BLK_REMAP_TABLE_ADDR + guwReMapTableSizePerBank * NandPara.ubBankNum) //0xc0028200
#define BLK_REMAP_BS_INDEX_TABLE_ADDR     	ALIGN_32(BLK_REMAP_BITMAP_TABLE_ADDR + NandPara.uwMpBlockNumPerLun * 2)//0xc0028200
#define BLK_REMAP_TEMP_ADDR					ALIGN_32(BLK_REMAP_BS_INDEX_TABLE_ADDR + NandPara.uwMpBlockNumPerLun)
#define BLK_REMAP_TABLE_SIZE     (0x800 * 32)//64K
#define BLK_REMAP_BITMAP_TABLE_ADDR     	ALIGN_32(BLK_REMAP_TABLE_ADDR + guwReMapTableSizePerBank * NandPara.ubBankNum) //0xc0028200
#define BLK_REMAP_BS_INDEX_TABLE_ADDR     	ALIGN_32(BLK_REMAP_BITMAP_TABLE_ADDR + NandPara.uwMpBlockNumPerLun * 2)//0xc0028200
#define BLK_REMAP_TEMP_ADDR					ALIGN_32(BLK_REMAP_BS_INDEX_TABLE_ADDR + NandPara.uwMpBlockNumPerLun)

#define MUL_HBUF_PHY_ADDR      (BLK_REMAP_TABLE_PHY_ADDR + BLK_REMAP_TABLE_SIZE)//0xc0038200
#define MUL_HBUF_ADDR          (MUL_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0038200
#define MUL_HBUF_SIZE          (2 * 1024)

#define DUMMY_DATA_BUF_PHY_ADDR  (MUL_HBUF_PHY_ADDR + MUL_HBUF_SIZE)//0xc0038a00
#define DUMMY_DATA_BUF_ADDR      (DUMMY_DATA_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0038a00
#define DUMMY_DATA_BUF_SIZE      0x8000//32K

#ifdef KEEP_ORIG_DBT
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0xc0040a00
#define ORIG_DBT_ADDR           (DUMMY_DATA_BUF_ADDR + DUMMY_DATA_BUF_SIZE)//0xc0040a00
#define ORIG_DBT_SIZE           DBT_SIZE // 32K  (0x8000)
#endif
#ifdef SLC_RRT
#ifdef KEEP_ORIG_DBT
#define SLCRRT_BUF_ADDR   (ORIG_DBT_ADDR + DBT_SIZE) //0xc0048a00
#define SLCRRT_BUF_SIZE   0x400
#else
#define SLCRRT_BUF_ADDR   (DUMMY_DATA_BUF_ADDR + DUMMY_DATA_BUF_SIZE ) //0xc0040a00
#define SLCRRT_BUF_SIZE   0x400
#endif
#endif

//#define ECT_PHY_ADDR			(TEMP_BUF_PHY_ADDR + TEMP_HBUF_SIZE) //0x0c078200
//#define ECT_VA_ADDR			(ECT_VA_ADDR + CACHED_PHY_TO_VA_OFFSET)//0x8c078200
//#define ECT_SIZE              0x4000 //16KB

#define MUL_BUF_PHY_ADDR      XOR_SRAM_BASE_PHY//0xd0000000
#define MUL_BUF_ADDR          XOR_SRAM_BASE_UCVA//0xd0000000
#define MUL_BUF_SIZE          0xA0000//640K

/**************************************
**      For Read Nand Function       **
**************************************/
#define LLF_READ_NAND_CHCE                       (LLF_RES_ERRMSG_START_VA_ADDR)       //b7-4:CH, b3-0:CE
#define LLF_READ_NAND_BLK_PAGE                   (LLF_READ_NAND_CHCE + WORD_BYTE_SIZE)  //H16:block, L16:page


//for Dump LLF Log, 0xC0050000-0xC006FFFF
#define LLFMEMMSGBUF_BASE_ADDR	     0xC0050000
#define LLFMEMMSGBUF_TOTALSIZE       0x20000 //128K

#define SCAN_DBT_CTR            0xD0080000          //For Factory Defect Flow
#define FACTORY_DEFECT_TAG      0x66778899          //For Factory Defect Flow
#elif defined(RL6447_VA)

/**************************************
** 	 LLF non-DRAM layout mapping     **
**************************************/
#define LLF_RAM_GLOBAL_ADDR         0x80104000
#define LLF_RAM_GLOBAL_SIZE         0x4000

#define BANK_IMAPPING_TABLE_PHY_ADDR SRAM5_BASE_PHY //0x08000000
#define BANK_IMAPPING_TABLE_ADDR     (BANK_IMAPPING_TABLE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xa8000000
#define BANK_IMAPPING_TABLE_SIZE     64

#define SBLK_PHY_ADDR                (BANK_IMAPPING_TABLE_PHY_ADDR + BANK_IMAPPING_TABLE_SIZE) //0x08000040
#define SBLK_ADDR                    (SBLK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET) //0xa8000040 save S Block here
#define SBLK_SIZE                    0x2000 // max 1 page size

#define FW_CODE_PHY_ADDR             (SBLK_PHY_ADDR + SBLK_SIZE)//0x08002040
#define FW_CODE_ADDR                 (FW_CODE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa8002040
#define FW_CODE_SIZE                 0xa8000 //672K origin: 0xa0000//640k  reserve 1M for FW IMAGE

#define TABLE_ADDR                   0xa8102040  //0xa8102040
#define TABLE_PHY_ADDR               (TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET) //(0x08102040)

#define PARSER_TABLE_VA_ADDR         TABLE_ADDR
#define PARSER_TABLE_SIZE            (1024*4)
#define SEQUENCER_TABLE_VA_ADDR      (PARSER_TABLE_VA_ADDR + PARSER_TABLE_SIZE)//0xa8103040
#define SEQUENCER_TABLE_SIZE         (256*4)
#define PARSER_INDEX_ADDR            (SEQUENCER_TABLE_VA_ADDR + SEQUENCER_TABLE_SIZE)//0xa8103440
#define PARSER_INDEX_SIZE            0x80
#define SEQUENCER_INDEX_ADDR         (PARSER_INDEX_ADDR + PARSER_INDEX_SIZE)//0xa81034c0
#define SEQUENCER_INDEX_SIZE         0x30
#define AUTO_INSERT_INDEX_ADDR       (SEQUENCER_INDEX_ADDR + SEQUENCER_INDEX_SIZE)//0xa81034f0
#define AUTO_INSERT_INDEX_SIZE       0x20
#define FC_TABLE_INFO_ADDR           (AUTO_INSERT_INDEX_ADDR + AUTO_INSERT_INDEX_SIZE)//0xa8103510
#define FC_TABLE_INFO_SIZE           0x80

#define DBT_ADDR                     ALIGN_32((FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE))//0xa81035a0 save DBT here
#define DBT_PHY_ADDR                 (DBT_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x081035a0
#define DBT_SIZE                     0x8000//32K

#define LLF_UNI_INFO_ADDR            (DBT_ADDR + DBT_SIZE)//0xa810b5a0
#define MAX_LLF_UNI_INFO_SIZE        (256)

#define TSB_RETRY_SETTING_ADDR       (LLF_UNI_INFO_ADDR + MAX_LLF_UNI_INFO_SIZE)//0xa810b6a0
#define MAX_TSB_RETRY_SETTING_SIZE   (256)

#define SYS_BLK_DBT_ADDR             (TSB_RETRY_SETTING_ADDR + MAX_TSB_RETRY_SETTING_SIZE)//0xa810b7a0
#define SYS_BLK_DBT_SIZE             (SYS_BLK_DBT_SIZE_PER_BANK * BANK_NUM_MAX)//on FPGA 128B, on IC 512B

#define GET_FEATURE_VA_ADDR          (SYS_BLK_DBT_ADDR + 512)//0xa810b9a0
#define GET_FEATURE_PHY_ADDR         (GET_FEATURE_VA_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x0810b9a0
#define GET_FEATURE_SIZE             (0x10)

#define TEMP_HBUF_PHY_ADDR           ALIGN_32((GET_FEATURE_PHY_ADDR + GET_FEATURE_SIZE))//0x0810b9c0
#define TEMP_HBUF_ADDR               (TEMP_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)// 0xa810b9c0
#define TEMP_HBUF_SIZE               (0x100 * 2)

#define GETFEATURE_BY_BANK_PHY   (TEMP_HBUF_PHY_ADDR + TEMP_HBUF_SIZE)//0x0810bbc0
#define GETFEATURE_BY_BANK_CA    (GETFEATURE_BY_BANK_PHY + CACHED_PHY_TO_VA_OFFSET)//0x8810bbc0
#define GETFEATURE_BY_BANK_UC    (GETFEATURE_BY_BANK_PHY + UNCACHED_PHY_TO_VA_OFFSET)//0xa810bbc0
#define GETFEATURE_BY_BANK_SIZE  (1024)

#define ALIGN_256B(X)            (((X) + 0xff) & 0xffffff00)
#define CONFIG_BASE_VA_ADDR      ALIGN_256B(GETFEATURE_BY_BANK_UC + GETFEATURE_BY_BANK_SIZE) //0xa810c000~0xa810d900 total 6.25K
#define CONFIG_SIZE              (0x1900)//6.25k

#define TEMP_BUF_ADDR            (CONFIG_BASE_VA_ADDR + CONFIG_SIZE)//0xa810d900
#define TEMP_BUF_PHY_ADDR        (TEMP_BUF_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0x0810d900
#define TEMP_BUF_SIZE            0xC000 //48K

#define DUMMY_DATA_BUF_PHY_ADDR  (TEMP_BUF_PHY_ADDR + TEMP_BUF_SIZE)//0x08119900
#define DUMMY_DATA_BUF_ADDR      (DUMMY_DATA_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa8119900
#define DUMMY_DATA_BUF_SIZE      0x8000//32K

#ifdef KEEP_ORIG_DBT
#define ORIG_DBT_ADDR           (DUMMY_DATA_BUF_ADDR + DUMMY_DATA_BUF_SIZE)//0xa8121900
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0x08121900
#define ORIG_DBT_SIZE           DBT_SIZE // 32K  (0x8000)
#endif

//#define ECT_VA_ADDR              (TEMP_BUF_ADDR + TEMP_BUF_SIZE)//0x88119900
//#define ECT_PHY_ADDR             (ECT_VA_ADDR - CACHED_PHY_TO_VA_OFFSET)
//#define ECT_SIZE                 0x4000 //16KB

#define MUL_HBUF_PHY_ADDR        0x080b0000
#define MUL_HBUF_ADDR            0xa80b0000
#define MUL_HBUF_SIZE            (0x10000)

#define MUL_BUF_PHY_ADDR      SRAM5_BASE_PHY//0x08000000
#define MUL_BUF_ADDR          SRAM5_START//0xa8000000
#define MUL_BUF_SIZE          0xb0000//704K

/**************************************
**      For Read Nand Function       **
**************************************/
#define LLF_READ_NAND_CHCE                       (LLF_RES_ERRMSG_START_VA_ADDR)       //b7-4:CH, b3-0:CE
#define LLF_READ_NAND_BLK_PAGE                   (LLF_READ_NAND_CHCE + WORD_BYTE_SIZE)  //H16:block, L16:page

//for Dump LLF Log
#define LLFMEMMSGBUF_BASE_ADDR	     FW_CODE_ADDR
#define LLFMEMMSGBUF_TOTALSIZE       FW_CODE_SIZE

#elif defined(RL6531_VB)
#define DATA_BUFFER_PHY_START			(0xC0000000)
#define DATA_BUFFER_VA_UNCACHE_START	(0xC0000000)
#define LLF_RAM_GLOBAL_ADDR         0x80218000
#define LLF_RAM_GLOBAL_SIZE         0x4000

//for FW image
#define FW_CODE_PHY_ADDR            0xcfff0000
#define FW_CODE_ADDR                0xcfff0000
#define FW_CODE_SIZE                0xa8000// 672k origin: 0xa0000//640k  reserve 1M for FW IMAGE

//SRAM
#define LDPC_G_MATRIX_SIZE          (0x4080)
#define LDPC_ET_MATRIX_SIZE         (0x400)
#define LDPC_LLR_MATRIX_SIZE        (0x500)
#define LDPC_MATRIX_SIZE            (LDPC_G_MATRIX_SIZE + LDPC_ET_MATRIX_SIZE + LDPC_LLR_MATRIX_SIZE)

#define TABLE_ADDR                  (DATA_BUFFER_VA_UNCACHE_START + 0xC800)//0xc000c800 the first 50k has been used 6643 
#define TABLE_PHY_ADDR              (DATA_BUFFER_PHY_START + 0xC800)//0xc000c800

#define PARSER_TABLE_VA_ADDR        TABLE_ADDR//0xc000c800
#define PARSER_TABLE_SIZE           (1024*4)
#define SEQUENCER_TABLE_VA_ADDR		(PARSER_TABLE_VA_ADDR + PARSER_TABLE_SIZE)//0xc000d800
#define SEQUENCER_TABLE_SIZE		(256*4)
#define PARSER_INDEX_ADDR			(SEQUENCER_TABLE_VA_ADDR + SEQUENCER_TABLE_SIZE)//0xc000dc00
#define PARSER_INDEX_SIZE			0x80
#define SEQUENCER_INDEX_ADDR		(PARSER_INDEX_ADDR + PARSER_INDEX_SIZE)//0xc000dc80
#define SEQUENCER_INDEX_SIZE		0x30
#define AUTO_INSERT_INDEX_ADDR		(SEQUENCER_INDEX_ADDR + SEQUENCER_INDEX_SIZE)//0xc000dcb0
#define AUTO_INSERT_INDEX_SIZE		0x20
#define FC_TABLE_INFO_ADDR          (AUTO_INSERT_INDEX_ADDR + AUTO_INSERT_INDEX_SIZE)//0xc000dcd0
#define FC_TABLE_INFO_SIZE          0x80

#define GET_FEATURE_VA_ADDR        (FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE)//0xc000dd50
#define GET_FEATURE_PHY_ADDR 	   (GET_FEATURE_VA_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xc000dd50
#define GET_FEATURE_SIZE           (0x10)

#define BANK_IMAPPING_TABLE_ADDR    	(GET_FEATURE_VA_ADDR + GET_FEATURE_SIZE) //0xc000ddd60
#define BANK_IMAPPING_TABLE_PHY_ADDR    (BANK_IMAPPING_TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET) //0xc000dd60
#define BANK_IMAPPING_TABLE_SIZE        64

#define SBLK_PHY_ADDR			    (BANK_IMAPPING_TABLE_PHY_ADDR + BANK_IMAPPING_TABLE_SIZE)//0xc000dda0
#define SBLK_ADDR                   (SBLK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET ) //0xc000dda0
#define SBLK_SIZE                    0x2000 //8K max 1 page size

#define CONFIG_BASE_VA_ADDR		    ALIGN_32(SBLK_ADDR + SBLK_SIZE)//0xc000fda0 total 6.25K need 32byte align 
#define CONFIG_SIZE				    (0x1900)//6.25k

#define DBT_ADDR                   (CONFIG_BASE_VA_ADDR + CONFIG_SIZE) // save DBT here 0xc00116a0
#define DBT_PHY_ADDR               (DBT_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xc00116a0

#define LLF_UNI_INFO_ADDR           (DBT_ADDR + DBT_SIZE)//0xc00196a0
#define MAX_LLF_UNI_INFO_SIZE       (256)

#define TSB_RETRY_SETTING_ADDR      (LLF_UNI_INFO_ADDR + MAX_LLF_UNI_INFO_SIZE)//0xc00197a0
#define MAX_TSB_RETRY_SETTING_SIZE  (256)

#define SYS_BLK_DBT_ADDR            (TSB_RETRY_SETTING_ADDR + MAX_TSB_RETRY_SETTING_SIZE)//0xc00198a0
#define SYS_BLK_DBT_SIZE            (SYS_BLK_DBT_BYTE_SIZE_PER_BLOCK * SYSTEM_BLOCK_MAX_NUM)

#define GETFEATURE_BY_BANK_PHY 	  ALIGN_32((SYS_BLK_DBT_ADDR + SYS_BLK_DBT_SIZE - UNCACHED_PHY_TO_VA_OFFSET))//0xc0019920
#define GETFEATURE_BY_BANK_CA	  (GETFEATURE_BY_BANK_PHY + CACHED_PHY_TO_VA_OFFSET)//0xe0019920
#define GETFEATURE_BY_BANK_UC	  (GETFEATURE_BY_BANK_PHY + UNCACHED_PHY_TO_VA_OFFSET)//0xc0019920
#define GETFEATURE_BY_BANK_SIZE   (1024)

#define TEMP_BUF_PHY_ADDR       0xc0020000
#define TEMP_BUF_ADDR           (TEMP_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0020000
#define TEMP_BUF_SIZE           0x8000 //32K

#define TEMP_HBUF_PHY_ADDR      (TEMP_BUF_PHY_ADDR + TEMP_BUF_SIZE)//0xc0028000
#define TEMP_HBUF_ADDR          (TEMP_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0028000
#define TEMP_HBUF_SIZE          (0x100 * 2)

#define BLK_REMAP_TABLE_PHY_ADDR (TEMP_HBUF_PHY_ADDR + TEMP_HBUF_SIZE)//0xc0028200
#define BLK_REMAP_TABLE_ADDR     (BLK_REMAP_TABLE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0028200
#define BLK_REMAP_TABLE_SIZE     (0x800 * 32)//64K

#define MUL_HBUF_PHY_ADDR      (BLK_REMAP_TABLE_PHY_ADDR + BLK_REMAP_TABLE_SIZE)//0xc0038200
#define MUL_HBUF_ADDR          (MUL_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0038200
#define MUL_HBUF_SIZE          (2 * 1024)

#define DUMMY_DATA_BUF_PHY_ADDR  (MUL_HBUF_PHY_ADDR + MUL_HBUF_SIZE)//0xc0038a00
#define DUMMY_DATA_BUF_ADDR      (DUMMY_DATA_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xc0038a00
#define DUMMY_DATA_BUF_SIZE       0x8000//32K

#ifdef KEEP_ORIG_DBT
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0xc0040a00
#define ORIG_DBT_ADDR           (DUMMY_DATA_BUF_ADDR + DUMMY_DATA_BUF_SIZE)//0xc0040a00
#define ORIG_DBT_SIZE           DBT_SIZE // 32K  (0x8000)
#endif

#define MUL_BUF_PHY_ADDR      XOR_SRAM_BASE_PHY//0xd0000000
#define MUL_BUF_ADDR          XOR_SRAM_BASE_UCVA//0xd0000000
#define MUL_BUF_SIZE          0xa0000//640K

#define LLF_READ_NAND_CHCE                       (LLF_RES_ERRMSG_START_VA_ADDR)       //b7-4:CH, b3-0:CE
#define LLF_READ_NAND_BLK_PAGE                   (LLF_READ_NAND_CHCE + WORD_BYTE_SIZE)  //H16:block, L16:page  

#elif defined(RTS5771_FPGA) || defined(RTS5771_VA)

//warning  the memeory need to modify after dic address mapping is finally ok!!!

/**************************************
** 	 LLF non-DRAM layout mapping **
**************************************/
#define LLF_RAM_GLOBAL_ADDR         0xa00c4000
#define LLF_RAM_GLOBAL_SIZE         0x4000

//for FW image
#define FW_CODE_PHY_ADDR            0xa2000000
#define FW_CODE_ADDR                (FW_CODE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa2000000
#ifdef OPAL_EN
#define FW_CODE_SIZE                (816*1024)
#else
#define FW_CODE_SIZE                (752*1024) //640K bitfile cause
#endif

//SRAM
#define LDPC_G_MATRIX_SIZE          (0x4080)
#define LDPC_ET_MATRIX_SIZE         (0x400)
#define LDPC_LLR_MATRIX_SIZE        (0x500)
#define LDPC_MATRIX_SIZE            (LDPC_G_MATRIX_SIZE + LDPC_ET_MATRIX_SIZE + LDPC_LLR_MATRIX_SIZE)

#define TABLE_ADDR                  SRAM5_START//0xA1000000
#define TABLE_PHY_ADDR				(TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xA1000000
#define PARSER_TABLE_VA_ADDR		TABLE_ADDR//0xA1000000
#define PARSER_TABLE_SIZE			(1024*4)
#define SEQUENCER_TABLE_VA_ADDR		(PARSER_TABLE_VA_ADDR + PARSER_TABLE_SIZE)//0xA1001000
#define SEQUENCER_TABLE_SIZE		(256*4)
#define PARSER_INDEX_ADDR			(SEQUENCER_TABLE_VA_ADDR + SEQUENCER_TABLE_SIZE)//0xa1001400
#define PARSER_INDEX_SIZE			0x80
#define SEQUENCER_INDEX_ADDR		(PARSER_INDEX_ADDR + PARSER_INDEX_SIZE)//0xa1001480
#define SEQUENCER_INDEX_SIZE		0x30
#define AUTO_INSERT_INDEX_ADDR		(SEQUENCER_INDEX_ADDR + SEQUENCER_INDEX_SIZE)//0xa10014b0
#define AUTO_INSERT_INDEX_SIZE		0x20
#define FC_TABLE_INFO_ADDR          (AUTO_INSERT_INDEX_ADDR + AUTO_INSERT_INDEX_SIZE)//0xa10014d0
#define FC_TABLE_INFO_SIZE          0x80
#define SEED_TABLE_VA_ADDR			((FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE + 0x200) & (~0x1ff))
#define SEED_TABLE_ACTUAL_USE_SIZE	(0x400)


#define GET_FEATURE_VA_ADDR        (FC_TABLE_INFO_ADDR + FC_TABLE_INFO_SIZE)//0xa1001550
#define GET_FEATURE_PHY_ADDR 	   (GET_FEATURE_VA_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xa1001550
#define GET_FEATURE_SIZE           (0x10)

#define BANK_IMAPPING_TABLE_ADDR    	(GET_FEATURE_VA_ADDR + GET_FEATURE_SIZE) //0xa1001560
#define BANK_IMAPPING_TABLE_PHY_ADDR    (BANK_IMAPPING_TABLE_ADDR - UNCACHED_PHY_TO_VA_OFFSET) //0xa1001560
#define BANK_IMAPPING_TABLE_SIZE        64

#define SBLK_PHY_ADDR			    (BANK_IMAPPING_TABLE_PHY_ADDR + BANK_IMAPPING_TABLE_SIZE)	//0xa10015a0
#define SBLK_ADDR                   (SBLK_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET ) // save S Block here 0xa10015a0
#define SBLK_SIZE                    0x2000 // max 1 page size

#define CONFIG_BASE_VA_ADDR		    ALIGN_32(SBLK_ADDR + SBLK_SIZE)//0xa10035a0 total 6.25K need 32byte align
#define CONFIG_SIZE				    (0x1900)//6.25KB: 4KB + 1KB for config and 1KB + 0.25KB for seed table
#define CONFIG_ACTUAL_USE_SIZE		(0x1400)
#define CONFIG_SEED_TABLE_SIZE		(0x500)
#define CONFIG_SEED_TABLE_VA_ADDR	ALIGN_32(CONFIG_BASE_VA_ADDR + CONFIG_ACTUAL_USE_SIZE)

#define DBT_ADDR                    (CONFIG_BASE_VA_ADDR + CONFIG_SIZE)// save DBT here 0xa1004ea0
#define DBT_PHY_ADDR				(DBT_ADDR - UNCACHED_PHY_TO_VA_OFFSET)//0xa1004ea0

#define LLF_UNI_INFO_ADDR           (DBT_ADDR + DBT_SIZE)//0xa100cea0
#define MAX_LLF_UNI_INFO_SIZE       (256)

#define TSB_RETRY_SETTING_ADDR      (LLF_UNI_INFO_ADDR + MAX_LLF_UNI_INFO_SIZE)//0xa100cfa0
#define MAX_TSB_RETRY_SETTING_SIZE  (256)

#define SYS_BLK_DBT_ADDR            (TSB_RETRY_SETTING_ADDR + MAX_TSB_RETRY_SETTING_SIZE)//0xa100d0a0
#define SYS_BLK_DBT_SIZE            (SYS_BLK_DBT_SIZE_PER_BANK * BANK_NUM_MAX)//512byte(8ch8ce)

#define GETFEATURE_BY_BANK_PHY 	  ALIGN_32((SYS_BLK_DBT_ADDR + SYS_BLK_DBT_SIZE - UNCACHED_PHY_TO_VA_OFFSET))//0xa100d2a0
#define GETFEATURE_BY_BANK_CA	  (GETFEATURE_BY_BANK_PHY + CACHED_PHY_TO_VA_OFFSET)//0x8100d2a0
#define GETFEATURE_BY_BANK_UC	  (GETFEATURE_BY_BANK_PHY + UNCACHED_PHY_TO_VA_OFFSET)//0xa100d2a0
#define GETFEATURE_BY_BANK_SIZE   (1024)


#define TEMP_BUF_PHY_ADDR       (0xa100e000)
#define TEMP_BUF_ADDR           (TEMP_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa100e000
#define TEMP_BUF_SIZE           0x8000 //32K 

#define TEMP_HBUF_PHY_ADDR      (TEMP_BUF_PHY_ADDR + TEMP_BUF_SIZE)//0xa1016000
#define TEMP_HBUF_ADDR          (TEMP_HBUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa1016000
#define TEMP_HBUF_SIZE          (0x100 * 2)

#define BLK_REMAP_TABLE_PHY_ADDR (TEMP_HBUF_PHY_ADDR + TEMP_HBUF_SIZE)//0xa1016200
#define BLK_REMAP_TABLE_ADDR     (BLK_REMAP_TABLE_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa1016200
#define BLK_REMAP_BITMAP_TABLE_ADDR     	ALIGN_32(BLK_REMAP_TABLE_ADDR + guwReMapTableSizePerBank * NandPara.ubBankNum)
#define BLK_REMAP_BS_INDEX_TABLE_ADDR     	ALIGN_32(BLK_REMAP_BITMAP_TABLE_ADDR + NandPara.uwMpBlockNumPerLun * 8)
#define BLK_REMAP_TEMP_ADDR					ALIGN_32(BLK_REMAP_BS_INDEX_TABLE_ADDR + NandPara.uwMpBlockNumPerLun)
#define BLK_REMAP_TABLE_SIZE     (0x18000)//96K (16k x BLK_REMAP_PRO_PAGENUM)

#define DCC_TRAINING_PHY_ADDR    (BLK_REMAP_TABLE_PHY_ADDR + BLK_REMAP_TABLE_SIZE)//0xa102e200
#define DCC_TRAINING_ADDR        (DCC_TRAINING_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa102e200
#define DCC_TRAINING_SIZE        (20 * 1024)//20K

#define DUMMY_DATA_BUF_PHY_ADDR  (DCC_TRAINING_PHY_ADDR + DCC_TRAINING_SIZE)//0xa1033200
#define DUMMY_DATA_BUF_ADDR      (DUMMY_DATA_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa1033200
#define DUMMY_DATA_BUF_SIZE      0x8000//32K

#ifdef KEEP_ORIG_DBT
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0xa103b200
#define ORIG_DBT_ADDR           (ORIG_DBT_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa103b200
#define ORIG_DBT_SIZE           DBT_SIZE // 32K  (0x8000)
#else
#define ORIG_DBT_PHY_ADDR       (DUMMY_DATA_BUF_PHY_ADDR + DUMMY_DATA_BUF_SIZE)//0xa103b200
#define ORIG_DBT_ADDR           (ORIG_DBT_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa103b200
#define ORIG_DBT_SIZE           (0)
#endif

#define SP_DBT_PHY_ADDR         (ORIG_DBT_PHY_ADDR + ORIG_DBT_SIZE)//0xa1043200
#define SP_DBT_ADDR             (SP_DBT_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET)//0xa1043200
#define SP_DBT_SIZE             (DEFECT_STATIC_SP_BLK_TABLE_SIZE_PER_BANK * BANK_NUM_MAX)//256K(8ch8ce)

#define MUL_HBUF_PHY_ADDR      XOR_SRAM_BASE_PHY//0xa2000000
#define MUL_HBUF_ADDR          XOR_SRAM_BASE_UCVA//0xa2000000
#define MUL_HBUF_SIZE          (4 * 1024)

#define MUL_BUF_PHY_ADDR      MUL_HBUF_PHY_ADDR + MUL_HBUF_SIZE//0xa2000c00
#define MUL_BUF_ADDR          MUL_BUF_PHY_ADDR + UNCACHED_PHY_TO_VA_OFFSET//0xa2000c00
#define MUL_BUF_SIZE          XOR_SRAM_SIZE - MUL_HBUF_SIZE //892K

/**************************************
**      For Read Nand Function       **
**************************************/
#define LLF_READ_NAND_CHCE                       (LLF_RES_ERRMSG_START_VA_ADDR)       //b7-4:CH, b3-0:CE
#define LLF_READ_NAND_BLK_PAGE                   (LLF_READ_NAND_CHCE + WORD_BYTE_SIZE)  //H16:block, L16:page  

//for Dump LLF Log
#define LLFMEMMSGBUF_BASE_ADDR	     FW_CODE_ADDR
#define LLFMEMMSGBUF_TOTALSIZE       FW_CODE_SIZE

#ifdef MULTI_LUN
#if defined(FTL_B47R)
#define MTL_SUPPORT_NAND
#endif
#endif

#endif

#ifdef OPAL_EN
#define TCG_SPECIAL_SIZE_IN_LBN     35333   // (MBR+DATASTORE) * 2 + OBJECT TABLE = (128MB + 10MB) * 2 + 20KB
#endif

#if defined(RL6643_VA) || defined(RL6577_VA) || defined(RL6447_VA) || defined(RTS5771_FPGA) || defined(RTS5771_VA)
void llfprintk(const char *fmt, ...);
void llfDbgPrintk(unsigned int level, const char *fmt, ...);
void llfprint_to_ram(const char *fmt, const U32 *dp);

#else
#define llfprintk(fmt,...)			\
do {								\
       printk(fmt, ##__VA_ARGS__);	\
} while (0)
#define llfDbgPrintk(level,fmt,...)				\
do {											\
       if (level & DBG_PRT_FILTER)				\
           DbgPrintk(level, fmt, ##__VA_ARGS__);\
} while (0)
#endif


#define ROMPARSER_MAX_LEN    60
// For Flash Vendor
#define FLASH_VENDOR_TSB         0
#define FLASH_VENDOR_MiCRON      1
#define FLASH_VENDOR_HYNIX       2
#define FLASH_VENDOR_INTEL       3
#define FLASH_VENDOR_SANDISK     4
#define FLASH_VENDOR_SANDISK_160G 5
#define FLASH_VENDOR_SANDISK_256G 6

#define FLASH_VENDOR_SAMSUNG	 0x7

#define FLASH_VENDOR_YMTC	 	 8
#define FLASH_VENDOR_UNKNOWN    0xFF

//For load configuration source
#define LOAD_FROM_SPI           0
#define LOAD_FROM_NAND          1
#define LOAD_FROM_OTP           2
#if defined(RL6577_PFGA) || defined(RL6577_VA) || defined(RL5771_VA)
#define NVME_IDENTIFY_OUI			(0x00E04C)		//IEEE OUI = 0x00E04C
#endif

#endif
